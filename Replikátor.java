//
//
//  Generated by StarUML(tm) Java Add-In
//	Modified by Harangozó
//	@Last modification: 2016.04.29.
//
//  @ Project : Grafikus
//  @ File Name : Replikátor.java
//  @ Generation date : 2016.04.15.
//  @ Author : kifli csapat
//
//

public class Replikátor {
	private DinamikusMező pozíció;	//A replikátor pozíciója.
	private Irány irány;	//A replikátor haladási iránya.
	private boolean életbenvan;	//Életben van-e a replikátor.
	
	public Replikátor(){	//A replikátor konstruktora
		pozíció=null;	//nincs a pályán kezdetben
		irány=Irány.n;	//kezdetben északra néz
		életbenvan=true;	//kezdetben életben van
	}
	
	public void elpusztul(){	//Elpusztítja a Replikátort és eltünteti a pályáról
		if(pozíció!=null)	//ha valahol ottvan a replikátor
			pozíció.setReplikátor(null);	//akkor onnan kiszedi magát
		életbenvan=false;	//és innentől nem lesz életben
	}
	
	public Irány getIrány(){	//Visszatér a replikátor irányával.
		return irány;
	}
	
	public DinamikusMező getPozíció(){	//Megadja a replikátor pozícióját.
		return pozíció;
	}
	
	public void fordul(Irány merre){	//A megadott irányba fordítja a replikátort.
		if(merre!=null) irány=merre;
	}
	
	public void setPozíció(DinamikusMező hova){	//Beállítja a replikátor pozícióját a megadott mezőre.
		if(pozíció!=null)	//ha volt valahol a pályán
			pozíció.setReplikátor(null);	//akkor az eddigi helyéről törli magát
		if(hova!=null) hova.setReplikátor(this);	//ha nem null ra akar lépni, beállítja magát a mezőre
		pozíció=hova;	//eltárolja, hogy hova került
	}
	
	public boolean getÉletbenvan(){	//Visszatér azzal hogy a replikátor életben van-e
		return életbenvan;
	}
	
	public void leesik(){	//A replikátor szakadékba esik és ott padlót hoz létre,majd megsemmisül.
		if(pozíció!=null)	//ha mára pályán van valahol.
			pozíció.getPár().setPályaelem(new Padló());	//létrehoz a leesés helyén egy padlót
		Hanglejátszó.getInstance().playSound(Hanglejátszó.getInstance().replikátor_szakadékban);	//ha szakadékba esik a replikátor, hangot hallat
		elpusztul();	//és meghal
	}
	public void lép() {
		DinamikusMező sz = pozíció.getSzomszéd(irány); //lekérjük a replikátor nézési irányának megfelelő szomszédot
		if(sz.getTárgy()!=null && sz.getTárgy().get(0).getTömeg()!=0) return; //ha ahova akar lépni tárgy, és nem ZPM nem léphet

		if (sz!=null) {	//ha nem vagyunk még a pálya szélén
			StatikusMező szp = sz.getPár();	//A dinamikus mező statikus mező párja
			
			Pályaelem pe = szp.getPályaelem();	//A statikus mezőn levő pályaelemet lekérdezzük
			
			if(pe.getAkadály()){	//Ha ez a pályaelem akadály...
				Csillagkapu tmp = sz.getCsk();	//megpróbáljuk betölteni róla az esetleges Csillagkaput
				if(tmp==null) { //Ha nincs rajta...
					return; 	//egyszerűen visszatérünk
				}
				else {	//Különben...
					Csillagkapu mcs = tmp.getMásik();	//Lekérdezzük a Csillagkapu párját
					if(mcs==null) {	//Ha nincs párja...
						return;		//visszatérünk
					}
					if(mcs.getFrontIrány()!=irány.ellentett()) return;
					DinamikusMező cél = mcs.getHova(); //erre a mezőre tesz ki a Csillagkapu párja
					setPozíció(cél);	//átlép a Csillagkapun
				}
			}	
			else {	//Innéttől már a pályaelem biztosan nem akadály, és mással nem tud konfrontálódni, csak pályaelemmel
				
				setPozíció(sz);	//beállítjuk a replikátort a szomszédos mezőre, így a lépés lezárul
				return;
			}
		}
	}
}